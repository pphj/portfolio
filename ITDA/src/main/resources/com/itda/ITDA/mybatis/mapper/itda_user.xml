<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itda.ITDA.mybatis.mapper.Itda_UserMapper">

	<select id="isId" resultType="Itda_User">
		select * from itda_user 
		where userId = #{userId}
	</select>


	 <insert id="insert" parameterType="Itda_User">
        insert into itda_user
        (userId, userPw, userName, userBirth, userGender, userPhone,
        userAddress1, userAddress2, userPost, userEmail, userCategory,
        userJoindate, statusId, userProfile, endData, authName)
        values(#{userId}, #{userPw}, #{userName}, #{userBirth}, #{userGender}, #{userPhone},
        #{userAddress1}, #{userAddress2}, #{userPost}, #{userEmail},
        #{userCategory},
        SYSDATE, 1, #{userProfile}, SYSDATE, 'ROLE_USER')
    </insert>
	
	<select id="read" resultType="Itda_user">
		SELECT
		    a.userid, a.useraddress1, a.useraddress2, 
		    a.useremail, a.username, a.userphone, 
		    a.userpost, a.userprofile, a.usercategory,
		    b.selleremail, b.sellerphone,
		    d.cate_name
		FROM
		    itda_user a
		LEFT JOIN
		    seller b ON a.userid = b.userid
		LEFT JOIN
		    usercategory c ON a.userid = c.userid
		LEFT JOIN
		    chcategory d ON c.cate_id = d.cate_id
		WHERE
		    a.userid = #{userId}
	</select>
	
	<update id="userAddressUpdate" parameterType="Itda_User">
		update itda_User
		set 
			userPost = #{userPost}, 
			userAddress1 = #{userAddress1}, 
			userAddress2 = nvl(#{userAddress2}, ' ')
		where userId = #{userId}
	</update>
	
	<select id="pwCheck" resultType="Itda_User">
		select userPw 
		from itda_user 
		where userId = #{userId}
	</select>
	
	<update id="pwUpdate" parameterType="Itda_User">
		update itda_user
		set	userPw = #{userPw}
		where userId = #{userId}
	</update>
	
	<select id="getUserName" resultType="Itda_User">
		select userName
		from itda_user 
		where userId = #{userId}
	</select>
	
	<select id="getLeaveReasonCategory" resultType="UserLeaveReason">
		select leaveReason_id, leaveReason_name
		from leavereasoncategory
	</select>
	  <!-- 이메일로 사용자 조회 -->  
   <select id ="findUserByEmail"
       parameterType ="String"
       resultType ="com.itda.ITDA.domain.Itda_User">   
       SELECT * FROM itda_user
       WHERE userEmail =#{email}   
   </select>   

   <!-- 비밀번호 재설정 -->   
   <update id ="resetPasswordByMap">    
       UPDATE itdA_USER SET     
           UserPw=#{newPassword}    
       WHERE userEmail=#{email}    
   </update>
	
	<!-- 회원 탈퇴 시 탈퇴 이유 insert -->
	<insert id="leaveResonInsert" parameterType="UserLeaveReason">
		insert into userleavereason 
				(userId, leaveReason_id, userLeaveReason)
		values
				(#{userId}, #{leaveReason_id}, 
			<choose>
				<when test='userLeaveReason == "null" or userLeaveReason == " "'>
					default value
				</when>
				<otherwise>
					#{userLeaveReason}
				</otherwise>
			</choose>
				)
	</insert>
	
	<!-- 탈퇴 회원 정보 탈퇴 회원 테이블에 insert -->
	<insert id="deleteUserInsert" parameterType="String">
		INSERT INTO deleteuser 
					(userId, deluserGender, age, deluserJoindate, deldate, deluserCate_num)
			SELECT 
					a.userId, a.usergender, TRUNC(MONTHS_BETWEEN(TRUNC(sysdate), TO_DATE(a.userbirth, 'yy/MM/dd'))/12) AS age, a.userjoindate, SYSTIMESTAMP AS deldate, b.cate_id			
			FROM 
					itda_user a
			INNER JOIN 
					usercategory b
			ON a.userId = b.userId
		WHERE a.userId = #{userId}
	</insert>
	
	<!-- 탈퇴 회원 itda_user와 관련된 정보 delete 하기 -->
	<delete id="itda_userDelete" parameterType="String">
		DELETE FROM itda_user 
		WHERE userId = #{userId}
	</delete>
	
	<!-- 유저 관심 카테고리 수정 -->
	<update id="userCategoryUpdate" parameterType="usercategory">
	    update usercategory
	    set cate_Id = #{cate_Id}
	    where userId = #{userId}
	</update>
	
	<!-- 접속자가 판매자인지 일반 유저인지 체크 -->
	<select id="isUserIdORSellerId" resultType="Itda_User">
	    SELECT
	        itda_user.userid as userId,
	        seller.userid as sellerId
	    FROM
	        itda_user
	    LEFT JOIN seller ON itda_user.userid = seller.userid
	    WHERE itda_user.userid = #{userId}
	        OR seller.userid = #{userId, jdbcType=VARCHAR}
	</select>
	
	<!-- 현재 이메일 체크 -->
	<select id="emailCheck" resultType="Itda_User">
		select userEmail
		from itda_user
		where userId = #{userId}
	</select>
	
	<!-- 이메일 변경 -->
	<update id="userEmailUpdate" parameterType="Itda_User">
		update itda_user
	    set userEmail = #{userEmail}
	    where userId = #{userId}
	</update>
	
	<!-- 비밀번호 재설정 -->
	<update id="updateUserPassword">
  	UPDATE itda_user SET userPw = #{encryptedPassword} WHERE userEmail = #{userEmail}
	</update>

	<!-- 유저 프로필 업데이트 -->
	<update id="userUpdateProfile" parameterType="Itda_User">
		update itda_user
	    set userProfile = #{userProfile}
	    where userId = #{userId}
	</update>
	
	<!-- 유료회원인지 확인하는 문장 -->
	<select id="isGoodUser" resultType="GoodUser">
	<![CDATA[
		select userId, startDate, firstDate, endDate
		from gooduser
		where userId = #{userId} and rownum <= 1
		ORDER BY startdate DESC
	]]>
	</select>
	
	<!-- 유료 회원에 최초 inset -->
	<insert id="insertFirstPaymentUser" parameterType="GoodUser">
	    <![CDATA[
	    INSERT INTO gooduser 
	    (userid, payednum, startdate, enddate, firstdate)
	    VALUES 
	    (#{userId}, #{payedNum}, #{startDate}, TO_DATE(TO_CHAR(#{startDate} + #{productTerm}, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS'), #{firstDate})
	    ]]>
	</insert>

	<!-- 유료회원이고 구독기간이 남았을 시 end 값 update -->
	<update id="updatePaymentUser" parameterType="GoodUser">
		update GoodUser
		set startDate = #{startDate},
			endDate = TO_DATE(TO_CHAR(#{endDate} + #{productTerm}, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')
		where userid = #{userId}
	</update>
	
	
	<!-- 유료회원이었고 구독기간이 끝났을 때 end 값 update -->
	<update id="updateResetPaymentUser" parameterType="GoodUser">
		update GoodUser
		set startDate = #{startDate},
			endDate = TO_DATE(TO_CHAR(#{startDate} + #{productTerm}, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')
		where userid = #{userId}
	</update>
	
	<!-- 나의 결제 list 불러오기 -->
	<select id="myOrderList" resultType="Order">
		SELECT 
			sp.productname, sp.PRODUCTDETAIL,
	        py.payednum, py.ordernum, py.payedokdate, py.payedprice, 
	        py.payedstatus, pc.userid
		FROM 
			subproduct sp
		INNER JOIN paycall pc ON sp.productid = pc.productid
		INNER JOIN payment py ON pc.callnum = py.ordernum
		WHERE pc.userid = #{userId}
		order by py.payednum desc
	</select>
	
	<!-- 결제 정보 자세히 보기 -->
	<select id="getOrderInfo" resultType="Order">
		SELECT sp.productname, sp.productprice,
	       py.payednum, py.payedmethod, py.ordernum, py.payedokdate, py.payedprice, py.payedstatus,
	       pc.callnum, pc.userid, pc.couponcode, sp.PRODUCTTERM, gu.startdate, py.discountPrice
		FROM subproduct sp
		INNER JOIN paycall pc ON sp.productid = pc.productid
		INNER JOIN payment py ON pc.callnum = py.ordernum
		INNER JOIN gooduser gu ON gu.userid = pc.userid
		WHERE py.payednum = #{payedNum}
	</select>

	<!-- 나의 결제 list count -->	
	<select id="orderListCount" resultType="int">
		SELECT count(*) as cnt
		FROM subproduct sp
		INNER JOIN paycall pc ON sp.productid = pc.productid
		INNER JOIN payment py ON pc.callnum = py.ordernum
		WHERE pc.userid = #{userId}
	</select> 
	
	<!-- 나의 좋아요 게시글 목록 -->
	<select id="likeContentList" resultType="LikeContent">
		SELECT 
				h.id, h.user_id, h.board_num, h.created_at,
		       cb.boardnum, cb.boardtitle, cb.boardheart, cb.boarddate, cb.thumbnail,
		       cl.chnum, cl.chname, cb.writer
		FROM 
				Heart h
		INNER JOIN chboard cb ON h.board_num = cb.boardnum
		INNER JOIN channellist cl ON cb.chnum = cl.chnum
		WHERE 
			h.user_id = #{userId}
		order by h.created_at desc
	</select>
	
		<!-- 나의 좋아요 게시글 전체 count -->
	<select id="likeContentCount" resultType="int">
		SELECT count(*) as count
		FROM 
				Heart h
		INNER JOIN chboard cb ON h.board_num = cb.boardnum
		INNER JOIN channellist cl ON cb.chnum = cl.chnum
		WHERE 
			h.user_id = #{userId}
	</select>
	
	<!-- 구독한 채널의 list 불러오기 -->
	<select id ="myLikeChList" resultType="LikeChannel">
		select 
				s.userid, s.subdate,
				ch.chnum, ch.chprofile, ch.chname, ch.ownerId
		from 
				sub s
		left join channellist ch on ch.chnum = s.subchnum
		left join itda_user iu on iu.userid = s.userid
		where s.userid = #{userId}
		order by s.subdate desc
	</select>
	
	<!-- 구독한 채널의 list 갯수 불러오기 -->
	<select id ="myLikeChListCount" resultType="int">
		select count(*) as count
		from sub s
		left join channellist ch on ch.chnum = s.subchnum
		left join itda_user iu on iu.userid = s.userid
		where s.userid = #{userId}
	</select>
	
	<!-- 구독한 채널의 최신글 중 7일 이내로 작성된 글을 보여주는 쿼리문 -->
	<select id="myLikeChNewContentList" resultType="LikeChNewContent">
		SELECT 
				ch.chnum, ch.chname, ch.chprofile, ch.ownerid,
		        s.userid, s.subchnum,
		        bo.boardnum, bo.writer, bo.boardtitle, bo.intro, bo.boarddate, bo.thumbNail
		FROM sub s
		LEFT JOIN channellist ch ON ch.chnum = s.subchnum
		LEFT JOIN itda_user iu ON iu.userid = s.userid
		LEFT JOIN chboard bo ON bo.chnum = s.subchnum
		WHERE s.userid = #{userId}
		  AND bo.boarddate >= (SYSDATE - 14)  
		ORDER BY bo.boarddate DESC
	</select>
		
	<!-- 구독한 채널 삭제하는 쿼리문 -->
	<delete	id="deleteLickCh" parameterType="sub">
		delete sub where userid=#{userid} and subchnum = #{subchnum}
	</delete>
	
	
	
</mapper>